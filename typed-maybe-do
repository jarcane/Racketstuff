#lang typed/racket

(define-type (Maybe a)
  (U (Some a) None))
(struct None () #:transparent)
(struct (a) Some ([v : a]) #:transparent)

(: return (All (a) (-> a (Maybe a))))
(define (return v)
  (Some v))

(: >>= (All (a b) (-> (Maybe a) (-> a (Maybe b)) (Maybe b))))
(define (>>= m fn)
  (match m
    [(None) (None)]
    [(Some v) (fn v)]))

(define-syntax do>
  (syntax-rules (<-)
    [(_ (exp ...)) (exp ...)]
    [(_ (name <- val) exp ...)
     (>>= val (Î» (name) (do> exp ...)))]))

(: // (-> (Maybe Number) (Maybe Number) (Maybe Number)))
(define (// x y)
  (do>
   ([a : Number] <- x)
   ([b : Number] <- y)
   (if (zero? b) (None) (Some (/ a b)))))